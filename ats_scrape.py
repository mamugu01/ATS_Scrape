# -*- coding: utf-8 -*-
"""ATS Scrape

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16vJCqpSKzbbTv-zlcDMmcOTaHKK0xKRz
"""

# Scrape the table from https://www.teamrankings.com/nba/trends/ats_trends/

import requests
from bs4 import BeautifulSoup, SoupStrainer
import pandas as pd

def find_solo(column):
        df[column] = df[column][0]

def find_schedule(link):
        page = requests.get(link)
        soup = BeautifulSoup(page.content, 'html.parser')
        table = soup.find_all("table")

        df = pd.DataFrame(table)
        data = pd.DataFrame(df[0][1])
        testing = data[0][3]
        count =0
        navstring = BeautifulSoup('<b class="boldest">Extremely bold</b>', 'html.parser')
        tag = navstring.b
        type(tag.string)
        for lines in testing:
                if type(lines) ==  type(tag.string):
                        continue
                else:
                        for line in lines:
                                if type(line) != type(tag.string):
                                        attrs =  line.attrs
                                        if len(attrs.keys()) >= 1:
                                                print(line)
                # print(type(line), "New line")
                # count +=1
                if count == 40:
                        break
                # for li in line:
                #         count += 1
                #         print(li)
                #         if type(li) != type("hi"):
                #                 print(li.string)
                # if count > 80:
                #         return


def get_data(league, stat):
        url = f"https://www.teamrankings.com/{league}/trends/{stat}_trends/"
        page = requests.get(url)

        soup = BeautifulSoup(page.content, 'html.parser')
        table = soup.find_all('tr')
        df = pd.DataFrame(table)

        df = df.drop(columns=[0, 2, 4, 6, 8, 10])
        df_href = df.iloc[:, 0]
        df_href = df_href.drop([0])
        df_href = df_href.apply(lambda x: x.a.get('href'))

        df = df.applymap(lambda x: x.string)
        df.columns = df.iloc[0]
        df = df.drop([0])
        df = df.set_index(df.columns[0])
        return df

ats_nba = get_data("nba", "ats")
ou_nba = get_data("nba", "ou")
wins_cb = get_data("nba", "win")


ats_cb = get_data("ncb", "ats")
ou_cb = get_data("ncb", "ou")
wins_cb = get_data("ncb", "win")

print(wins_cb)
cb = ats_cb.merge(ou_cb, on="Team")
nba = ats_nba.merge(ou_nba, on="Team")
nba



def check_correct(all_teams):
  new_list = all_teams
  check = False
  while (not check):
    if (new_list[0][1][0] != "/nba/matchup/cavaliers-grizzlies-2021-10-20"):
      new_list[0] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 0)

    if (new_list[1][1][0] != "/nba/matchup/thunder-jazz-2021-10-20"):
      new_list[1] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 1)

    if (new_list[2][1][0] != "/nba/matchup/mavericks-hawks-2021-10-21"):
      new_list[2] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 2)

    if (new_list[3][1][0] != "/nba/matchup/bucks-heat-2021-10-21"):
      new_list[3] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 3)

    if (new_list[4][1][0] != "/nba/matchup/pacers-hornets-2021-10-20"):
      new_list[4] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 4)

    if (new_list[5][1][0] != "/nba/matchup/wizards-raptors-2021-10-20"):
      new_list[5] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 5)

    if (new_list[6][1][0] != "/nba/matchup/bulls-pistons-2021-10-20"):
      new_list[6] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 6)

    if (new_list[7][1][0] != "/nba/matchup/warriors-lakers-2021-10-19"):
      new_list[7] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 7)

    if (new_list[8][1][0] != "/nba/matchup/celtics-knicks-2021-10-20"):
      new_list[8] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 8)

    if (new_list[9][1][0] != "/nba/matchup/cavaliers-grizzlies-2021-10-20"):
      new_list[9] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 9)

    if (new_list[10][1][0] != "/nba/matchup/nuggets-suns-2021-10-20"):
      new_list[10] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 10)

    if (new_list[11][1][0] != "/nba/matchup/magic-spurs-2021-10-20"):
      new_list[11] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 11)

    if (new_list[12][1][0] != "/nba/matchup/rockets-timberwolves-2021-10-20"):
      new_list[12] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 12)

    if (new_list[13][1][0] != "/nba/matchup/bulls-pistons-2021-10-20"):
      new_list[13] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 13)

    if (new_list[14][1][0] != "/nba/matchup/76ers-pelicans-2021-10-20"):
      new_list[14] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 14)

    if (new_list[15][1][0] != "/nba/matchup/clippers-warriors-2021-10-21"):
      new_list[15] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 15)

    if (new_list[16][1][0] != "/nba/matchup/76ers-pelicans-2021-10-20"):
      new_list[16] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 16)

    if (new_list[17][1][0] != "/nba/matchup/celtics-knicks-2021-10-20"):
      new_list[17] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 17)

    if (new_list[18][1][0] != "/nba/matchup/kings-trail-blazers-2021-10-20"):
      new_list[18] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 18)

    if (new_list[19][1][0] != "/nba/matchup/pacers-hornets-2021-10-20"):
      new_list[19] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 19)

    if (new_list[20][1][0] != "/nba/matchup/nets-bucks-2021-10-19"):
      new_list[20] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 20)

    if (new_list[21][1][0] != "/nba/matchup/mavericks-hawks-2021-10-21"):
      new_list[21] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 21)

    if (new_list[22][1][0] != "/nba/matchup/magic-spurs-2021-10-20"):
      new_list[22] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 22)

    if (new_list[23][1][0] != "/nba/matchup/nuggets-suns-2021-10-20"):
      new_list[23] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 23)

    if (new_list[24][1][0] != "/nba/matchup/rockets-timberwolves-2021-10-20"):
      new_list[24] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 24)

    if (new_list[25][1][0] != "/nba/matchup/warriors-lakers-2021-10-19"):
      new_list[25] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 25)

    if (new_list[26][1][0] != "/nba/matchup/thunder-jazz-2021-10-20"):
      new_list[26] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 26)

    if (new_list[27][1][0] != "/nba/matchup/wizards-raptors-2021-10-20"):
      new_list[27] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 27)

    if (new_list[28][1][0] != "/nba/matchup/nets-bucks-2021-10-19"):
      new_list[28] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 28)

    if (new_list[29][1][0] != "/nba/matchup/kings-trail-blazers-2021-10-20"):
      new_list[29] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 29)
    else:
      check = True

  return new_list

def check_correct(all_teams):
  new_list = all_teams
  check = False
  while (not check):
    if (new_list[0][1][0] != "/nba/matchup/cavaliers-grizzlies-2021-10-20"):
      new_list[0] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 0)

    if (new_list[1][1][0] != "/nba/matchup/thunder-jazz-2021-10-20"):
      new_list[1] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 1)

    if (new_list[2][1][0] != "/nba/matchup/mavericks-hawks-2021-10-21"):
      new_list[2] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 2)

    if (new_list[3][1][0] != "/nba/matchup/bucks-heat-2021-10-21"):
      new_list[3] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 3)

    if (new_list[4][1][0] != "/nba/matchup/pacers-hornets-2021-10-20"):
      new_list[4] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 4)

    if (new_list[5][1][0] != "/nba/matchup/wizards-raptors-2021-10-20"):
      new_list[5] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 5)

    if (new_list[6][1][0] != "/nba/matchup/bulls-pistons-2021-10-20"):
      new_list[6] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 6)

    if (new_list[7][1][0] != "/nba/matchup/warriors-lakers-2021-10-19"):
      new_list[7] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 7)

    if (new_list[8][1][0] != "/nba/matchup/celtics-knicks-2021-10-20"):
      new_list[8] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 8)

    if (new_list[9][1][0] != "/nba/matchup/cavaliers-grizzlies-2021-10-20"):
      new_list[9] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 9)

    if (new_list[10][1][0] != "/nba/matchup/nuggets-suns-2021-10-20"):
      new_list[10] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 10)

    if (new_list[11][1][0] != "/nba/matchup/magic-spurs-2021-10-20"):
      new_list[11] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 11)

    if (new_list[12][1][0] != "/nba/matchup/rockets-timberwolves-2021-10-20"):
      new_list[12] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 12)

    if (new_list[13][1][0] != "/nba/matchup/bulls-pistons-2021-10-20"):
      new_list[13] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 13)

    if (new_list[14][1][0] != "/nba/matchup/76ers-pelicans-2021-10-20"):
      new_list[14] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 14)

    if (new_list[16][1][0] != "/nba/matchup/clippers-warriors-2021-10-21"):
      new_list[16] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 16)

    if (new_list[15][1][0] != "/nba/matchup/76ers-pelicans-2021-10-20"):
      new_list[15] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 15)

    if (new_list[17][1][0] != "/nba/matchup/celtics-knicks-2021-10-20"):
      new_list[17] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 17)

    if (new_list[18][1][0] != "/nba/matchup/kings-trail-blazers-2021-10-20"):
      new_list[18] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 18)

    if (new_list[19][1][0] != "/nba/matchup/pacers-hornets-2021-10-20"):
      new_list[19] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 19)

    if (new_list[20][1][0] != "/nba/matchup/nets-bucks-2021-10-19"):
      new_list[20] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 20)

    if (new_list[21][1][0] != "/nba/matchup/mavericks-hawks-2021-10-21"):
      new_list[21] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 21)

    if (new_list[22][1][0] != "/nba/matchup/magic-spurs-2021-10-20"):
      new_list[22] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 22)

    if (new_list[23][1][0] != "/nba/matchup/nuggets-suns-2021-10-20"):
      new_list[23] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 23)

    if (new_list[24][1][0] != "/nba/matchup/rockets-timberwolves-2021-10-20"):
      new_list[24] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 24)

    if (new_list[25][1][0] != "/nba/matchup/warriors-lakers-2021-10-19"):
      new_list[25] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 25)

    if (new_list[26][1][0] != "/nba/matchup/thunder-jazz-2021-10-20"):
      new_list[26] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 26)

    if (new_list[27][1][0] != "/nba/matchup/wizards-raptors-2021-10-20"):
      new_list[27] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 27)

    if (new_list[28][1][0] != "/nba/matchup/nets-bucks-2021-10-19"):
      new_list[28] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 28)

    if (new_list[29][1][0] != "/nba/matchup/kings-trail-blazers-2021-10-20"):
      new_list[29] = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 29)
    else:
      check = True

  return new_list

import re

# neeed to make the amount of games in regular season
def get_team_schedule(team_link):
  page = requests.get(team_link)
  soup = BeautifulSoup(page.content, parse_only=SoupStrainer('table'))
  links = soup.find_all('tr')
  values = links[2]
  links = links[3:35]

  # NEED to Expand for rest of games!

  values = values.text.splitlines()
  data = [values]
  for link in links:
    split = link.text.splitlines()
    if split[-3] == '(Pick)':
      split[-3] = 0.0
    game_link = str(link.find('a'))
    game_link = re.findall(r'"([^"]*)"', game_link)
    split[0] = game_link[0]
    split[3] = split[3].split()
    data.append(split)
  return data

# Need to iterate through links to find all teams
def get_teams_in_league(link, team):
        page = requests.get(link)
        soup = BeautifulSoup(page.content, parse_only=SoupStrainer('table'))
        links = soup.find_all('a')
        print(links[team]["href"])
        return get_team_schedule(links[team]["href"])


games = get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", 1)
pd.DataFrame(games)

all_teams = []
i = 0
for i in range(30):
  all_teams.append(get_teams_in_league("https://www.teamrankings.com/nba/trends/ats_trends/", i))


print(len(all_teams))
# for j in all_teams:
#   print(j[1][0])

teams = pd.DataFrame(all_teams)
teams

from statistics import mean
def ats_diff(game):
  if game == []:
    return None
  # print(game[3])
  score = game[3][1].split("-")
  score_team = score[0]
  score_other = score[1]

  spread = float(game[-3])
  # print(game[-3])

  result = int(score_team) - int(score_other)
  # game = game.append(result + spread)
  return (result + spread)

ats_diff_teams = []
for i in range(0,30):
  ats_diff_team = []
  print(all_teams[i])
  for game in range(1, 30):
    # print(all_teams[i][game])
    ats_diff_team.append(ats_diff(all_teams[i][game]))
  ats_diff_teams.append(ats_diff_team)


print(ats_diff_teams)

#
# ats_diff_teams[team_number][game_number]
spreads_ot = pd.DataFrame(ats_diff_teams)
spread_t = spreads_ot.transpose()
# print(spreads_ot)
spreads_new = spread_t.rolling(10).mean()
spreads_new.transpose()

#spreads_new[0].plot(figsize=(20, 10)).line()

# spreads_ot.groupby('product')['sales'].plot(legend=True)
#spreads_new_1 = spreads_new[0]
#spreads_new_1 = spreads_new_1.append(spreads_new[29])
# spreads_new_1.plot(figsize=(20, 10),subplots=True).line()
# spreads_new_2.plot(figsize=(20, 10)).line()

# spreads_new.plot(figsize=(20, 10),subplots=True).line()
#spread_t.plot(figsize=(20, 10)).line()
# spreads_ot[0:10]

# print(ats_diff_list)
# mean(ats_diff_list)

# ats_diff_teams[team_name][game_number] * player_minutes[game_number]

def reformat_points(box_score):
  copy = box_score
  box_score[box_score.columns[14]] = box_score[box_score.columns[14]].apply(lambda x: 0 if (x == 'Did Not Play') else (x))

  sum = box_score[box_score.columns[14]]
  total = 0
  for i in sum:
    total += int(i)
  # print(total)

  copy[copy.columns[14]] = copy[copy.columns[14]].apply(lambda x: 0 if (x == 'Did Not Play') else (int(x)/total))
  return copy[copy.columns[::14]]
# reformat_points(box_score)

def reformat_pm(score):
  box_score[box_score.columns[1]] = box_score[box_score.columns[1]].apply(lambda x: 0 if (x == 'Did Not Play') else ((int(x[:-3]) + int(x[-2:])/60  )/ 240 ))
  return box_score[box_score.columns[0:2]]

dfs = pd.read_html("https://www.teamrankings.com/nba/matchup/pelicans-grizzlies-2022-03-08/box-score")
box_score = dfs[2]
print(box_score)

box_score[box_score.columns[1]] = box_score[box_score.columns[13]]
box_score[box_score.columns[0:2]]

dfs = pd.read_html("https://www.teamrankings.com/nba/matchup/pelicans-grizzlies-2022-03-08/box-score")
box_score = dfs[2]
# print(box_score)
game_1_min = reformat_min(box_score)

game_1_min.columns = ["Name", "Min_Pct"]

game_1_pts = reformat_points(box_score)
game_1_pts.columns = ["Name", "Pts_Pct"]


box_score[box_score.columns[1]] = box_score[box_score.columns[13]]
game_1_pm = box_score[box_score.columns[0:2]]
game_1_pm.columns = ["Name", "Pts_PM"]


merged = pd.merge(game_1_min, game_1_pts, on="Name")
merged = pd.merge(merged, game_1_pm, on="Name")
merged["Pts_PM_Abs"] = merged["Pts_PM"].abs()
merged

dfs = pd.read_html("https://www.teamrankings.com/nba/matchup/pelicans-grizzlies-2022-03-08/box-score")
box_score = dfs[2]


# print(schedule)

def reformat_min(box_score):
  # "10:43"

  # x[0:-3] = 10
  # x[-2:end] = 43
  box_score[box_score.columns[1]] = box_score[box_score.columns[1]].apply(lambda x: 0 if (x == 'Did Not Play') else ((int(x[:-3]) + int(x[-2:])/60  )/ 240 ))
  return box_score[box_score.columns[0:2]]
game_1 = reformat_min(box_score)

def reformat_pm(box_score):
  box_score[box_score.columns[1]] = box_score[box_score.columns[13]].apply(lambda x: 0 if (x == 'Did Not Play') else int(x))
  game_1_pm = box_score[box_score.columns[0:2]]
  game_1_pm.columns = ["Name", "Pts_PM"]
  return game_1_pm


print(game_1)

dfs = pd.read_html("https://www.teamrankings.com/nba/matchup/cavaliers-grizzlies-2021-10-20/box-score")
box_score = dfs[2]
# print(box_score)
game_2 = reformat_min(box_score)
print(game_2.columns[0][0])
# print(game_1, game_2)
result = pd.concat([game_1, game_2], axis=0)
result.columns = ['Name', 'Min_Pct']
result['bnew'] = result['Min_Pct']*100
result['team_name']= game_2.columns[0][0]
print(result)
# aggregation_functions = {'price': 'sum', 'amount': 'sum', 'name': 'first'}
# df_new = result.groupby(result[result.columns[0]])
# print(df_new)
# sums = result.groupby(by=["Name"])
# sums.sum()

dfs = pd.read_html("https://www.teamrankings.com/nba/matchup/cavaliers-grizzlies-2021-10-20/box-score")
box_score = dfs[1]


box_score

import requests
def format_box_scores(teams):
  box_scores = pd.DataFrame()
  for i in range(0,len(teams)):
    team_schedule = teams[i]
    ats_team = ats_diff_teams[i]
    for j in range(1,29):
      game = team_schedule[j][0]
      print('Matt' + str(j))
      game_ats = ats_team[j-1]

      game_location_home = False
      if team_schedule[j][4] == "Home":
        game_location_home = True
      url = requests.get(f"https://www.teamrankings.com{game}/box-score")
      # print(ats_team[j-1], f"https://www.teamrankings.com{game}/box-score")
      print(url.text)
      dfs = pd.read_html(url.text)
      print(dfs)
      box_score_away = dfs[1]
      box_score_home = dfs[2]

      home_pts = reformat_points(box_score_home)
      home_pts.columns = ["Name", "Pts_Pct"]

      away_pts = reformat_points(box_score_away)
      away_pts.columns = ["Name", "Pts_Pct"]

      game_min_home = reformat_min(box_score_home)
      game_min_away = reformat_min(box_score_away)

      home_team = game_min_home.columns[0][0]
      away_team = game_min_away.columns[0][0]

      home_min = pd.DataFrame(game_min_home)
      away_min = pd.DataFrame(game_min_away)

      home_min.columns = ['Name', 'Min_Pct']
      away_min.columns = ['Name', 'Min_Pct']

      home_pm = reformat_pm(box_score_home)
      away_pm = reformat_pm(box_score_away)

      merged = pd.merge(home_min, home_pts, on="Name")
      merged_home = pd.merge(merged, home_pm, on="Name")
      merged_home["Pts_PM_Abs"] = merged_home["Pts_PM"].abs()
      # print(merged_home)

      merged = pd.merge(away_min, away_pts, on="Name")
      merged_away = pd.merge(merged, away_pm, on="Name")
      merged_away["Pts_PM_Abs"] = merged_away["Pts_PM"].abs()

      if game_location_home:
        merged_home["ATS_PM_PG"] = merged_home['Min_Pct'] * game_ats
        merged_home["ATS_PTS"] = merged_home['Pts_Pct'] * game_ats
        merged_home["Pts_PM_Abs_ATS"] = merged_home["Pts_PM_Abs"] * game_ats
        merged_home["Pts_PM_ATS"] = merged_home["Pts_PM"] * game_ats

        merged_away["ATS_PM_PG"] = merged_away['Min_Pct'] * game_ats * -1
        merged_away["ATS_PTS"] = merged_away['Pts_Pct'] * game_ats * -1
        merged_away["Pts_PM_Abs_ATS"] = merged_away["Pts_PM_Abs"] * game_ats * -1
        merged_away["Pts_PM_ATS"] = merged_away["Pts_PM"] * game_ats * -1
      else:
        merged_home["ATS_PM_PG"] = merged_home['Min_Pct'] * game_ats * -1
        merged_home["ATS_PTS"] = merged_home['Pts_Pct'] * game_ats * -1
        merged_home["Pts_PM_Abs_ATS"] = merged_home["Pts_PM_Abs"] * game_ats * -1
        merged_home["Pts_PM_ATS"] = merged_home["Pts_PM"] * game_ats * -1

        merged_away["ATS_PM_PG"] = merged_away['Min_Pct'] * game_ats
        merged_away["ATS_PTS"] = merged_away['Pts_Pct'] * game_ats
        merged_away["Pts_PM_Abs_ATS"] = merged_away["Pts_PM_Abs"] * game_ats
        merged_away["Pts_PM_ATS"] = merged_away["Pts_PM"] * game_ats

      merged_home['Team_Name'] = home_team
      merged_away['Team_Name'] = away_team

      result = pd.concat([merged_home, merged_away], axis=0)
      # print(result)
      box_scores = box_scores.append(result)


  return box_scores

testing = all_teams

box_scores = format_box_scores(testing)

box_scores

print(all_teams[0][2])

box_scores

# df = pd.DataFrame(box_scores)
# df.head()
box_scores
new= box_scores.groupby(by=["Name", 'Team_Name'], axis=0)
sumed_ats = new.sum()
sumed_ats

sumed_ats.to_csv('ats.csv')

# sumed_ats.loc[sumed_ats['Name']== 1.450694]

reset = sumed_ats.reset_index()
reset.loc[reset['Name'] == "Robert Williams"]

col1 = result.columns[1]
result[col1].sum()

cb.to_csv('cbb_odds.csv')

game_griz = pd.read_html("https://www.teamrankings.com/nba/matchup/cavaliers-grizzlies-2021-10-20/box-score")



game_griz[game_griz.columns[1]]

# If DNP